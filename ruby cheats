ARRAY
[1,2].max|min
[2,1].sort = [1,2]
[1,2].join(",") = "1,2"
[a,b,c] & [b,c,d] returns [b,c] (intersection)
[a,b] + [c] = [a,b,c]
[a,b] << c = [a,b,c]

ITERATORS
.each
.collect/map

MATHS
** (exponent) e.g **2 = square

PRINTF
<format> % number
"%03d" : min. 3 characters , puts 2 leading zeroes if 1 digit

REGEX
string =~ /r/
string.scan(r)
string.match(r)
string.gsub/sub(r,'substituted_text')

SWITCH
case var
when value
else
end

TIME
strftime("due on %B %d at %I:%M %p")
Year: Y/y
Month: m/b/B
Date: d/-d
Day: a/A

METHOD
Method is an object
Time.method :now will return a Time.now method object
can 'call' a method_object to execute it

CLASS
def initialize(params)
class A < B (inherits B's public methods.B is not instantiated)
class A < B::C (Where B is the module holding the C class)
can re-open B's method in A
Reopen method is overriden
To superimpose, add "super"
To make it's variables available, use attr_accessor

Length
truncate(string, length:80, separator: ' ')
